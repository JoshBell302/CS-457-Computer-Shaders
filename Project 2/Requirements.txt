Requirements:

1. Using a GLIB file (for glman) or using the GLSL API, be able to vary the following parameters:
Parameter	What It Does
uAd		Ellipse diameter for s
uBd		Ellipse diameter for t
uNoiseAmp	Noise Amplitude
uNoiseFreq	Noise Frequency
uTol		Width of the blend between ellipse and non-ellipse areas
uAlpha		Alpha value for the areas outside the ellipses

The .glib file, including the Extra Credit parameter, might look like this:
------------------------------------------------
##OpenGL GLIB
LookAt  0 0 3  0 0 0  0 1 0
Perspective 70

Vertex   ovalnoise.vert
Fragment ovalnoise.frag
Program  OvalNoise                                              \
        uAd <.01 .05 .5>  uBd <.01 .05 .5>                      \
        uNoiseAmp <0. 0. 1.>  uNoiseFreq <0. 1. 10.>      	\
        uTol <0. 0. 1.>						\
        uAlpha <0. 1. 1.> 


Color 1. .9 0
Sphere
------------------------------------------------

2. Remember that the border of an ellipse, defined in s and t coordinates is:
d = (s-sc)2 / Ar2 + (t-tc)2 / Br2 = 1

3. The NoiseFreq parameter is the frequency of the noise function, i.e., it multiplies what goes into the noise function.

4. The NoiseAmp parameter is the amplitude of the noise function, i.e., it multiplies the noise value.

5. The effects of the NoiseAmp and NoiseFreq parameters should look something like this:
	IMAGES HERE

6. The uTol parameter is the width of a smoothstep( ) blend between the ellipse and non-ellipse areas, thus smoothing the abrupt color transition.

float t = smoothstep( 1. - uTol, 1. + uTol, d );

Then use d in the mix function.

7. You can have as many other uniform variables as you wish.

8. Apply lighting. The easiest way to do this would be to just use diffuse in per-vertex lighting, looking at the cosine of the angle between the surface normal and the vector to the light source:
------------------------------------------------
out float	vLightIntensity;

const vec3 LIGHTPOS   = vec3( -2., 0., 10. );
   . . .
vec3 tnorm      = normalize( gl_NormalMatrix * gl_Normal );	// transformed normal
vec3 ECposition = ( gl_ModelViewMatrix * gl_Vertex ).xyz;
vLightIntensity  = abs(  dot( normalize(LIGHTPOS - ECposition), tnorm )  );
------------------------------------------------

Of course, you can make this as sophisticated as you want, including interpolating the transformed normal through the rasterizer and using per-fragment lighting.

9. The ellipses must be created procedurally, i.e., with equations in the Fragment Shader program. (No texture images.)

10. As we discussed in class, get a noise value based on the current fragment's model coordinates. Use all 4 octaves available. Then use that value to alter the ds and dt values. Then use those new ds and dt values to determine the correct color to use.
------------------------------------------------
// read the glman 2D noise texture (if using s,t or the 3D noise texture if using x,y,z:

---------------------------------

uniform sampler2D Noise2;
. . .
nv  = texture2D( Noise2, uNoiseFreq*vST );

------------  or  ---------------

uniform sampler3D Noise3;
. . .
nv  = texture3D( Noise3, uNoiseFreq*vMCposition );

---------------------------------

// give the noise a range of [-1.,+1.]:

float n = nv.r + nv.g + nv.b + nv.a;    //  1. -> 3.
n = n - 2.;                             // -1. -> 1.

// determine the color based on the noise-modified (s,t):

float sc = float(numins) * uAd  +  Ar;
float ds = st.s - sc;                   // wrt ellipse center
float tc = float(numint) * uBd  +  Br;
float dt = st.t - tc;                   // wrt ellipse center

float oldDist = sqrt( ds*ds + dt*dt );
float newDist = << use the noise value, n >>
float scale = newDist / oldDist;        // this could be < 1., = 1., or > 1.

<< scale ds and dt, then divide both by Ar and Br >>

<< compute d using the new ds and dt >>
------------------------------------------------

11. The choice of geometry is up to you. You are allowed to contrive the size to make it work.